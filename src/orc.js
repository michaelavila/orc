// Generated by CoffeeScript 1.6.3
(function() {
  var ExecutionContext, Orc, OrcError, exports, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Orc = (function() {
    function Orc() {
      this.execute = __bind(this.execute, this);
      this.errorOn = __bind(this.errorOn, this);
      this.waitFor = __bind(this.waitFor, this);
      this.stacks = [];
      this.currentStack = null;
    }

    Orc.prototype.sequence = function() {
      var context, functions;
      functions = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      context = new ExecutionContext(functions);
      context.handleError = this.fail;
      if (this.currentStack != null) {
        this.currentStack.push(context);
      } else {
        this.stacks.push([context]);
        this.execute();
      }
      return context;
    };

    Orc.prototype.waitFor = function(callback) {
      var context, contextStack,
        _this = this;
      context = this.currentStack.last().wait();
      contextStack = this.currentStack;
      return function() {
        var error;
        if (callback != null) {
          _this.currentStack = contextStack;
          try {
            callback.apply(null, arguments);
          } catch (_error) {
            error = _error;
            _this.currentStack.last().handleError(error, context);
          }
          _this.currentStack = null;
        }
        return context.done();
      };
    };

    Orc.prototype.errorOn = function(callback) {
      var context,
        _this = this;
      context = this.currentStack.last();
      return function() {
        if (callback != null) {
          callback.apply(null, arguments);
        }
        return context.handleError.apply(context, arguments);
      };
    };

    Orc.prototype.fail = function() {
      throw new OrcError();
    };

    Orc.prototype.execute = function() {
      var index, _i, _len, _ref;
      while (this.canExecute()) {
        _ref = this.stacks;
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          this.currentStack = _ref[index];
          this.executeNext();
          if (this.currentStack.isEmpty()) {
            this.stacks.splice(index, 1);
            break;
          }
        }
      }
      return this.currentStack = null;
    };

    Orc.prototype.executeNext = function() {
      var context;
      context = this.currentStack.last();
      if (context.canExecute()) {
        context.executeNext(this.execute);
      }
      if (!(context.waiting() || context.canExecute())) {
        return this.currentStack.pop();
      }
    };

    Orc.prototype.canExecute = function() {
      var contextStack, _i, _len, _ref;
      _ref = this.stacks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        contextStack = _ref[_i];
        if (!(contextStack.isEmpty() || contextStack.last().waiting())) {
          return true;
        }
      }
      return false;
    };

    return Orc;

  })();

  ExecutionContext = (function() {
    function ExecutionContext(functions) {
      this.functions = functions != null ? functions : [];
      this.holds = 0;
    }

    ExecutionContext.prototype.waiting = function() {
      return this.holds > 0;
    };

    ExecutionContext.prototype.wait = function() {
      this.holds++;
      return this;
    };

    ExecutionContext.prototype.done = function() {
      if (!this.waiting()) {
        return;
      }
      this.holds--;
      if (!this.waiting()) {
        return this.handleReady();
      }
    };

    ExecutionContext.prototype.canExecute = function() {
      return !this.functions.isEmpty();
    };

    ExecutionContext.prototype.executeNext = function(handleReady) {
      this.functions.shift()();
      if (this.waiting()) {
        return this.handleReady = handleReady;
      }
    };

    ExecutionContext.prototype.handleError = function() {};

    ExecutionContext.prototype.handleReady = function() {};

    return ExecutionContext;

  })();

  OrcError = (function(_super) {
    __extends(OrcError, _super);

    function OrcError() {
      _ref = OrcError.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return OrcError;

  })(Error);

  Array.prototype.isEmpty = function() {
    return this.length === 0;
  };

  Array.prototype.last = function() {
    return this[this.length - 1];
  };

  exports = exports != null ? exports : this;

  exports.Orc = Orc;

  exports.ExecutionContext = ExecutionContext;

  exports.orc = new Orc;

}).call(this);
